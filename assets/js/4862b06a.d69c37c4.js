"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[7148],{9075:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=e(5893),a=e(1151);const r={id:"godoc1",title:"Get Started",sidebar_label:"Get Started"},s=void 0,o={id:"snippets/programming/go/godoc1",title:"Get Started",description:"Return two variables",source:"@site/docs/snippets/programming/go/godoc1.mdx",sourceDirName:"snippets/programming/go",slug:"/snippets/programming/go/godoc1",permalink:"/docs/snippets/programming/go/godoc1",draft:!1,unlisted:!1,editUrl:"https://github.com/dipjyotimetia/Docs/docs/snippets/programming/go/godoc1.mdx",tags:[],version:"current",frontMatter:{id:"godoc1",title:"Get Started",sidebar_label:"Get Started"},sidebar:"Docs",previous:{title:"Hyper-V",permalink:"/docs/snippets/generic/hyperv"},next:{title:"Get Little bit deeper",permalink:"/docs/snippets/programming/go/godoc2"}},l={},c=[{value:"Return two variables",id:"return-two-variables",level:3},{value:"Naked Return",id:"naked-return",level:3},{value:"var can be used as packages or in functions",id:"var-can-be-used-as-packages-or-in-functions",level:3},{value:"if a initializer is present , type can be omitted",id:"if-a-initializer-is-present--type-can-be-omitted",level:3},{value:"the := the short assignment statement can be used in place of var, inside a function only",id:"the--the-short-assignment-statement-can-be-used-in-place-of-var-inside-a-function-only",level:3}];function m(n){const t={code:"code",h3:"h3",pre:"pre",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"return-two-variables",children:"Return two variables"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc swap(x ,y string)(string,string)  {\n\treturn y,x\n}\n\nfunc main() {\n\ta,b := swap("hello","world")\n    fmt.Println(a,b)\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"naked-return",children:"Naked Return"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'\npackage main\n\nimport "fmt"\n\nfunc split(sum int)(x,y int)  {\n\tx= sum *4/9\n\ty=sum - x\n\treturn\t//known as naked return, not good for using in long functions\n}\n\nfunc main() {\n\tfmt.Println(split(17))\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"var-can-be-used-as-packages-or-in-functions",children:"var can be used as packages or in functions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nvar c, python, java bool\n\nfunc main() {\n\tvar i int\n\tfmt.Println(i, c, python, java)\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"if-a-initializer-is-present--type-can-be-omitted",children:"if a initializer is present , type can be omitted"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'\npackage main\n\nimport "fmt"\n\nvar i, j int = 2, 4\n\nfunc main() {\n\tvar c, python, java = true, false, "no!"\n\tfmt.Println(i, j, c, python, java)\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"the--the-short-assignment-statement-can-be-used-in-place-of-var-inside-a-function-only",children:"the := the short assignment statement can be used in place of var, inside a function only"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport "fmt"\n\nfunc main() {\n\tvar i, j int = 1, 2\n\tk := 3\n\tc, python, java := true, false, "no!"\n\tfmt.Println(i, j, k, c, python, java)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//go basic types\npackage main\n\nimport (\n\t"fmt"\n\t"math/cmplx"\n)\n\nvar (\n\tToBe   bool       = false\n\tMaxInt uint64     = 1<<64 - 1\n\tZ complex128 = cmplx.Sqrt(-5 + 12i)\n)\n\nfunc main() {\n\tfmt.Printf("Type: %T Value: %v\\n", ToBe, ToBe)\n\tfmt.Printf("Type: %T Value: %v\\n", MaxInt, MaxInt)\n\tfmt.Printf("Type: %T Value: %v\\n", Z, Z)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// variables without and explicit value initialized are given their zero value \npackage main\n\nimport "fmt"\n\nfunc main() {\n\tvar i int\n\tvar f float64\n\tvar b bool\n\tvar s string\n\tfmt.Printf("%v %v %v %q\\n", i, f, b, s)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//Expression T(v) change the type of v\npackage main\n\nimport (\n\t"fmt"\n\t"math"\n)\n\nfunc main() {\n\tvar x, y int = 3, 4\n\tvar f float64 = math.Sqrt(float64(x*x + y*y))\n\tvar z uint = uint(f)\n\tfmt.Println(x, y, z)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//when declaring a variable without a specific type the default right side will be considered\npackage main\n\nimport (\n\t"fmt"\n)\n\nfunc main() {\n\tv := 2546546546464\n\tfmt.Printf("v is of type %T\\n", v)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// const can be declared as var but with const keyword\npackage main\n\nimport "fmt"\n\nconst Pi = 3.14\n\nfunc main() {\n\tconst word = "fwefwe"\n\tfmt.Println("Hello", word)\n\tfmt.Println("Happy", Pi, "Day")\n\n\tconst Truth = true\n\tfmt.Println("Go Rules?", Truth)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//for loop\npackage main\n\nimport "fmt"\n\nfunc main() {\n\tsum := 0\n\tfor i:=0; i<100;i++ {\n\t\tsum += i\n\t}\n\tfmt.Println(sum)\n}\n// init and post statements are optional\n\nfunc main() {\n\tsum := 1\n\tfor ; sum<1000; {\n\t\tsum += sum\n\t}\n\tfmt.Println(sum)\n}\n// can remove the semicolon as well, for is Go\'s while\nfunc main() {\n\tsum := 1\n\tfor sum < 1000{\n\t\tsum += sum\n\t}\n\tfmt.Println(sum)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//if loop\npackage main\n\nimport (\n\t"fmt"\n\t"math"\n)\n\nfunc sqrt(x float64) string {\n\tif x < 0 {\n\t\treturn sqrt(-x) + "i"\n\t}\n\treturn fmt.Sprint(math.Sqrt(x))\n}\n\nfunc main() {\n\tfmt.Println(sqrt(2), sqrt(-4))\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//if with a short statement\npackage main\n\nimport (\n\t"fmt"\n\t"math"\n)\n//if\nfunc pow(x, n, lim float64) float64 {\n\tif v := math.Pow(x, n); v < lim {\n\t\treturn v\n\t}\n\treturn lim\n}\n//if-else\nfunc pow(x, n, lim float64) float64 {\n\tif v := math.Pow(x, n); v < lim {\n\t\treturn v\n\t} else {\n\t\tfmt.Printf("%g >= %g\\n", v, lim)\n\t}\n\treturn lim\n}\n\nfunc main() {\n\tfmt.Println(\n\t\tpow(3, 2, 10),\n\t\tpow(3, 3, 20),\n\t)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// implementation\npackage main\n\nimport (\n\t"fmt"\n)\n\nfunc Sqrt(x float64) float64 {\n\tz := float64(1)\n\tfmt.Printf("Sqrt approximation of %v:\\n",x)\n\tfor i:=1;i<=10;i++ {\n\t\tz -= (z*z -x)/(2*z)\n\t\tfmt.Printf("Iteration %v,value = %v\\n",i,z)\n\t}\n\treturn z\n}\n\nfunc main() {\n\tfmt.Println(Sqrt(2))\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//switch\npackage main\n\nimport (\n\t"fmt"\n\t"runtime"\n    "time"\n)\n\nfunc main()  {\n\tswitch os:= runtime.GOOS; os {\n\n\tcase "darwin":\n\t\tfmt.Println("OS x.")\n\tcase "linux":\n\t\tfmt.Println("Linux")\n\tdefault:\n\t\tfmt.Printf("%s.\\n",os)\n\t}\n}\n\nfunc main() {\n\ttoday := time.Now().Weekday()\n\tswitch time.Sunday {\n\n\tcase today + 0:\n\t\tfmt.Println("Today")\n\tcase today + 1:\n\t\tfmt.Println("Tomorrow")\n\tcase today + 2:\n\t\tfmt.Println("In two days")\n\tdefault:\n\t\tfmt.Println("Too far away")\n\t}\n}\n// switch with no condition, same as switch true\nfunc main() {\n\tt := time.Now()\n\tswitch  {\n\tcase t.Hour()<12:\n\t\tfmt.Println("Good morning")\n\tcase t.Hour()<17:\n\t\tfmt.Println("Good afternoon")\n\tdefault:\n\t\tfmt.Println("Good evening")\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// defer statement defers the execution until surrounding function returns\npackage main\n\nimport (\n\t"fmt"\n)\n\nfunc main() {\n\tdefer fmt.Println("World")\n\tfmt.Println("Hello")\n}\n\n//Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.\nfunc main() {\n\n\tfmt.Println("counting")\n\tfor i:=0;i<10;i++ {\n\t\tdefer fmt.Println(i)\n\t}\n\tfmt.Println("done")\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//pointers\npackage main\n\nimport "fmt"\n\nfunc main() {\n\n\ti,j := 42,2701\n\tp := &i \t\t//point to i\n\tfmt.Println(*p) //read i through the pointer (hex address stored 0xc0000a0068)\n\t*p = 21         //set i through the pointer\n\tfmt.Println(i)\t// see the new value of i\n\n\tp = &j\t\t\t//point to j\n\t*p = *p/37      //divide j thought he pointer\n\tfmt.Println(j)\t// see the new value of j\n\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'\n\n\n//Structs is a collection of fields\n\npackage main\n\nimport "fmt"\n\ntype Vertex struct {\n\tx int\n\ty int\n}\n\nfunc main() {\n\tfmt.Println(Vertex{1,2})\n}\n// structs filed can be accessed using dot\nfunc main() {\n\tv := Vertex{1,2}\n\tv.x = 4\n\tfmt.Println(v.x)\n}\n//pointer to struct\nfunc main() {\n\tv := Vertex{1,2}\n\tp := &v\n\tp.x = 1e9\n\tfmt.Println(v)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//struct literals\npackage main\n\nimport "fmt"\n\ntype Vertex struct {\n\tX, Y int\n}\n\nvar (\n\tv1 = Vertex{1, 2}  // has type Vertex\n\tv2 = Vertex{X: 1}  // Y:0 is implicit\n\tv3 = Vertex{}      // X:0 and Y:0\n\tp  = &Vertex{1, 2} // has type *Vertex\n)\n\nfunc main() {\n\tfmt.Println(v1, p, v2, v3)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// arrays\npackage main\n\nimport "fmt"\n\nfunc main() {\n\tvar a [2]string\n\ta[0] = "Hello"\n\ta[1] = "world"\n\tfmt.Println(a[0], a[1])\n\tfmt.Println(a)\n\n\tprimes := [6]int{2, 3, 5, 6, 7, 8}\n\tfmt.Println(primes)\n}\n//slices\nfunc main() {\n\tprimes := [6]int{2, 3, 5, 7, 11, 13}\n\tvar s []int = primes[1:4]\n\tfmt.Println(s)\n}\n\n//A slice does not store any data, it just describes a section of an underlying array.\nfunc main() {\n\tnames := [4]string{\n\t\t"John",\n\t\t"Paul",\n\t\t"George",\n\t\t"Ringo",\n\t}\n\n\tfmt.Println(names)\n\ta := names[0:2]\n\tb := names[1:3]\n\tfmt.Println(a, b)\n\n\tb[0] = "XXX"\n\tfmt.Println(a, b)\n\tfmt.Println(names)\n\n}\n//slice literals\n\nfunc main() {\n\tq := []int{2, 3, 5, 7, 11, 13}\n\tfmt.Println(q)\n\n\tr := []bool{true, false, true, false, true}\n\tfmt.Println(r)\n\n\ts := []struct {\n\t\ti int\n\t\tb bool\n\t}{\n\t\t{2, true},\n\t\t{3, false},\n\t\t{5, true},\n\t\t{7, true},\n\t\t{11, false},\n\t\t{13, true},\n\t}\n\tfmt.Println(s)\n}\n\n//slice defaults\nfunc main() {\n\ts := []int{2, 3, 5, 7, 11, 13}\n\n\ts = s[1:4]\n\tfmt.Println(s)\n\n\ts = s[:2]\n\tfmt.Println(s)\n\n\ts = s[1:]\n\tfmt.Println(s)\n}\n\n// the zero value of a slice is nil\nfunc main() {\n\tvar s []int\n\tfmt.Println(s, len(s), cap(s))\n\tif s == nil {\n\t\tfmt.Println("nil!")\n\t}\n}\n\n// creating slice with make\nfunc printSlice(s string, x []int) {\n\tfmt.Printf("%s len=%d cap=%d%v\\n", s, len(x), cap(x), x)\n}\n\nfunc main() {\n\ta := make([]int, 5)\n\tprintSlice("a", a)\n\n\tb := make([]int, 0, 5)\n\tprintSlice("b", b)\n\n\tc := b[:2]\n\tprintSlice("c", c)\n\n\td := c[2:5]\n\tprintSlice("d", d)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//slices of slices\n\npackage main\n\nimport (\n\t"fmt"\n\t"strings"\n)\n\nfunc main() {\n\tboard := [][]string{\n\t\t[]string{"_", "_", "_"},\n\t\t[]string{"_", "_", "_"},\n\t\t[]string{"_", "_", "_"},\n\t}\n\tboard[0][0] = "X"\n\tboard[2][2] = "O"\n\tboard[1][2] = "X"\n\tboard[1][0] = "O"\n\tboard[0][2] = "X"\n\n\tfor i := 0; i < len(board); i++ {\n\t\tfmt.Printf("%s\\n", strings.Join(board[i], ""))\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//appending to a slice\npackage main\n\nimport (\n\t"fmt"\n)\n\nfunc printSlice(s []int) {\n\tfmt.Printf("len=%d cap=%d %v\\n", len(s), cap(s), s)\n}\n\nfunc main() {\n\tvar s []int\n\tprintSlice(s)\n\n\t//append works on nil slices\n\ts = append(s, 0)\n\tprintSlice(s)\n\n\t//the slice grows as needed\n\ts = append(s, 1)\n\tprintSlice(s)\n\n\t// we can add more than one element at a time\n\ts = append(s, 2, 3, 4)\n\tprintSlice(s)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//range\n\npackage main\n\nimport "fmt"\n\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\nfunc main() {\n\n\tfor i, v := range pow {\n\t\tfmt.Printf("2**%d = %d\\n", i, v)\n\t}\n}\n// we can skip the index or value by assigning _\n\nfunc main() {\n\n\tpows := make([]int, 10)\n\n\tfor i := range pows {\n\t\tpows[i] = 1 << uint(i) // == 2**i\n\t}\n\tfor _, value := range pows {\n\t\tfmt.Printf("%d\\n", value)\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//Map\n\npackage main\n\nimport "fmt"\n\ntype Vertex struct {\n\tLat, Long float64\n}\n\nvar m map[string]Vertex\n\nfunc main() {\n\tm = make(map[string]Vertex)\n\tm["Bell Labs"] = Vertex{\n\t\t40.68433, -74.39967,\n\t}\n\tm["Key Tar"] = Vertex{\n\t\t34.0908,-44.56464,\n\t}\n\tfmt.Println(m["Key Tar"])\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// Map literals\npackage main\n\nimport "fmt"\n\ntype Vertex struct {\n\tLat, Long float64\n}\n\nvar m = map[string]Vertex{\n\t"Bell Labs": {\n\t\t40.78433, -74.39967,\n\t},\n\t"Google": {\n\t\t37.42202, -122.08408,\n\t},\n}\n\nfunc main() {\n\tfmt.Println(m)\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// Mutating Maps\npackage main\n\nimport "fmt"\n\nfunc main() {\n\tm := make(map[string]int)\n\n\tm["Answer"] = 42\n\tfmt.Println("The value:", m["Answer"])\n\n\tm["Answer"] = 48\n\tfmt.Println("The Value:", m["Answer"])\n\n\tdelete(m, "Answer")\n\tfmt.Println("The value:", m["Answer"])\n\n\tv, ok := m["Answer"]\n\tfmt.Println("The value:", v, "Present?", ok)\n}\n\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//function values\npackage main\n\nimport (\n\t"fmt"\n\t"math"\n)\n\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n\nfunc main() {\n\thypot := func(x, y float64) float64 {\n\t\treturn math.Sqrt(x*x + y*y)\n\t}\n\tfmt.Println(hypot(5, 12))\n\n\tfmt.Println(compute(hypot))\n\tfmt.Println(compute(math.Pow))\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'//function closures\n\npackage main\n\nimport "fmt"\n\nfunc addr() func(int) int {\n\tsum := 0\n\treturn func(x int) int {\n\t\tsum += x\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := addr(), addr()\n\tfor i := 0; i < 100; i++ {\n\t\tfmt.Println(\n\t\t\tpos(i),\n\t\t\tneg(-2*i),\n\t\t)\n\t}\n}\n\n'})})]})}function f(n={}){const{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},1151:(n,t,e)=>{e.d(t,{Z:()=>o,a:()=>s});var i=e(7294);const a={},r=i.createContext(a);function s(n){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function o(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),i.createElement(r.Provider,{value:t},n.children)}}}]);