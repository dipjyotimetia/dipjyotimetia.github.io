"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[5619],{3905:(r,n,e)=>{e.d(n,{Zo:()=>p,kt:()=>m});var t=e(7294);function a(r,n,e){return n in r?Object.defineProperty(r,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):r[n]=e,r}function i(r,n){var e=Object.keys(r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(r);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(r,n).enumerable}))),e.push.apply(e,t)}return e}function o(r){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?i(Object(e),!0).forEach((function(n){a(r,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(n){Object.defineProperty(r,n,Object.getOwnPropertyDescriptor(e,n))}))}return r}function l(r,n){if(null==r)return{};var e,t,a=function(r,n){if(null==r)return{};var e,t,a={},i=Object.keys(r);for(t=0;t<i.length;t++)e=i[t],n.indexOf(e)>=0||(a[e]=r[e]);return a}(r,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(r);for(t=0;t<i.length;t++)e=i[t],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(r,e)&&(a[e]=r[e])}return a}var s=t.createContext({}),c=function(r){var n=t.useContext(s),e=n;return r&&(e="function"==typeof r?r(n):o(o({},n),r)),e},p=function(r){var n=c(r.components);return t.createElement(s.Provider,{value:n},r.children)},f="mdxType",g={inlineCode:"code",wrapper:function(r){var n=r.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(r,n){var e=r.components,a=r.mdxType,i=r.originalType,s=r.parentName,p=l(r,["components","mdxType","originalType","parentName"]),f=c(e),u=a,m=f["".concat(s,".").concat(u)]||f[u]||g[u]||i;return e?t.createElement(m,o(o({ref:n},p),{},{components:e})):t.createElement(m,o({ref:n},p))}));function m(r,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof r||a){var i=e.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=r,l[f]="string"==typeof r?r:a,o[1]=l;for(var c=2;c<i;c++)o[c]=e[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}u.displayName="MDXCreateElement"},570:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=e(7462),a=(e(7294),e(3905));const i={id:"arrays",title:"DSA Arrays",sidebar_label:"DSA_Arrays"},o=void 0,l={unversionedId:"snippets/programming/java/arrays",id:"snippets/programming/java/arrays",title:"DSA Arrays",description:"",source:"@site/docs/snippets/programming/java/arrays.md",sourceDirName:"snippets/programming/java",slug:"/snippets/programming/java/arrays",permalink:"/docs/snippets/programming/java/arrays",draft:!1,editUrl:"https://github.com/dipjyotimetia/Docs/docs/snippets/programming/java/arrays.md",tags:[],version:"current",frontMatter:{id:"arrays",title:"DSA Arrays",sidebar_label:"DSA_Arrays"},sidebar:"Docs",previous:{title:"Get Started",permalink:"/docs/snippets/programming/java/java1"},next:{title:"React",permalink:"/docs/snippets/programming/react/react1"}},s={},c=[],p={toc:c};function f(r){let{components:n,...e}=r;return(0,a.kt)("wrapper",(0,t.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Big o of n time, array search if array in un-sorted O(n)\n     * Linear search\n     * In worst case it will traverse the whole array\n     * search in sorted way O(logn)\n     */\n    public int search(int arr[], int element) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Time complexity of insert operation is O(n)\n     * time complexity if insert os O(1)\n     */\n    public int insert(int arr[], int element, int capacity, int position) {\n        if (arr.length == capacity) {\n            return arr.length;\n        }\n        int index = position - 1;\n        for (int i = arr.length - 1; i >= index; i--) {\n            arr[i + 1] = arr[i];\n            arr[index] = element;\n        }\n        return element + 1;\n    }\n\n    public int delete(int arr[], int element) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == element) {\n                break;\n            }\n            if (i == arr.length) {\n                return arr.length;\n            }\n            for (int j = i; j < arr.length - 1; j++) {\n                arr[j] = arr[j + 1];\n            }\n        }\n        return arr.length - 1;\n    }\n\n    /**\n     * Find the largest element of an array\n     * Time complexity of this approach is O(n^2)\n     */\n    public int getLargestElement(int arr[]) {\n        for (int i = 0; i < arr.length; i++) {\n            boolean flag = true;\n            for (int j = 0; j < arr.length; j++) {\n                if (arr[j] > arr[i]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag == true) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Find the largest element of an array\n     * Time complexity of this approach is O(n)\n     */\n    public int getLargestElementEfficient(int arr[]) {\n        int res = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[res]) {\n                res = i;\n            }\n        }\n        return res;\n    }\n\n    public int getSecondLargestElement(int arr[]) {\n        int res = -1;\n        int largest = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[largest]) {\n                res = largest;\n                largest = i;\n            } else if (arr[i] != arr[largest]) {\n                if (res == -1 || arr[i] > arr[res]) {\n                    res = i;\n                }\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Time complexity is O(n^2)\n     */\n    public boolean checkArrayIsSorted(int arr[]) {\n        boolean flag = true;\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[i]) {\n                    return false;\n                }\n            }\n        }\n        return flag;\n    }\n\n    /**\n     * Time complexity is O(n), understand auxilary space?\n     */\n    public boolean checkArrayIsSortedEfficient(int arr[]) {\n        boolean flag = true;\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < arr[i - 1]) {\n                return false;\n            }\n        }\n        return flag;\n    }\n\n    /**\n     * Reverse an array problem\n     */\n\n    public void reverseArray(int arr[]) {\n        int low = 0;\n        int high = arr.length - 1;\n        while (low < high) {\n            int temp = arr[low];\n            arr[low] = arr[high];\n            arr[high] = temp;\n            low++;\n            high--;\n        }\n    }\n\n")))}f.isMDXComponent=!0}}]);