"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[6202],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=l(t),f=r,m=g["".concat(c,".").concat(f)]||g[f]||d[f]||i;return t?o.createElement(m,a(a({ref:n},u),{},{components:t})):o.createElement(m,a({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[g]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const i={slug:"function",title:"function",author:"Dipjyoti Metia",author_title:"Lead Software Engineer",author_url:"https://github.com/dipjyotimetia",author_image_url:"https://avatars3.githubusercontent.com/u/18288720?s=400&u=168a31a123ff5c1c44afc29a579f91d13813da54&v=4",tags:["cloud function","tech","golang","serverless"],description:"This blog talked about serverless mocking using cloud function",image:"../static/img/blog/cloudfunctions.png",hide_table_of_contents:!1},a=void 0,s={permalink:"/blog/function",editUrl:"https://github.com/dipjyotimetia/blog/blog/blog/2021-07-30-functions.md",source:"@site/blog/2021-07-30-functions.md",title:"function",description:"This blog talked about serverless mocking using cloud function",date:"2021-07-30T00:00:00.000Z",formattedDate:"July 30, 2021",tags:[{label:"cloud function",permalink:"/blog/tags/cloud-function"},{label:"tech",permalink:"/blog/tags/tech"},{label:"golang",permalink:"/blog/tags/golang"},{label:"serverless",permalink:"/blog/tags/serverless"}],readingTime:3.27,hasTruncateMarker:!1,authors:[{name:"Dipjyoti Metia",title:"Lead Software Engineer",url:"https://github.com/dipjyotimetia",imageURL:"https://avatars3.githubusercontent.com/u/18288720?s=400&u=168a31a123ff5c1c44afc29a579f91d13813da54&v=4"}],frontMatter:{slug:"function",title:"function",author:"Dipjyoti Metia",author_title:"Lead Software Engineer",author_url:"https://github.com/dipjyotimetia",author_image_url:"https://avatars3.githubusercontent.com/u/18288720?s=400&u=168a31a123ff5c1c44afc29a579f91d13813da54&v=4",tags:["cloud function","tech","golang","serverless"],description:"This blog talked about serverless mocking using cloud function",image:"../static/img/blog/cloudfunctions.png",hide_table_of_contents:!1},nextItem:{title:"Kafka",permalink:"/blog/kafka"}},c={authorsImageUrls:[void 0]},l=[{value:"What is serverless",id:"what-is-serverless",level:2},{value:"Introduction to cloud functions",id:"introduction-to-cloud-functions",level:2},{value:"Functions Framework",id:"functions-framework",level:2},{value:"Deploy cloud function",id:"deploy-cloud-function",level:3},{value:"Why Mocking using cloud function",id:"why-mocking-using-cloud-function",level:2},{value:"Use cases of mocking using cloud function",id:"use-cases-of-mocking-using-cloud-function",level:2},{value:"System Testing",id:"system-testing",level:3},{value:"Performance testing",id:"performance-testing",level:3}],u={toc:l};function g(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-serverless"},"What is serverless"),(0,r.kt)("p",null,"Serverless computing is a method of providing backend services on an as-used basis. A serverless provider allows users to write and deploy code without the hassle of worrying about the underlying infrastructure. code executes in a fully managed environment and no need to provision any infrastructure."),(0,r.kt)("h2",{id:"introduction-to-cloud-functions"},"Introduction to cloud functions"),(0,r.kt)("p",null,"Google Cloud Functions is a serverless execution environment for building and connecting cloud services. With Cloud Functions you write simple, single-purpose functions that are attached to events emitted from your cloud infrastructure and services. Your Cloud Function is triggered when an event being watched is fired. Your code executes in a fully managed environment. There is no need to provision any infrastructure or worry about managing any servers."),(0,r.kt)("h2",{id:"functions-framework"},"Functions Framework"),(0,r.kt)("p",null,"The Functions Framework lets you write lightweight functions that run in many different environments. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/GoogleCloudPlatform/functions-framework"},"Functions framework")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/GoogleCloudPlatform/functions-framework-go/funcframework"\n    p "github.com/cloudmock"\n    "golang.org/x/net/context"\n    "log"\n    "os"\n)\n\nfunc main() {\n    ctx := context.Background()\n    if err := funcframework.RegisterHTTPFunctionContext(ctx, "/", p.GoMock); err != nil {\n        log.Fatalf("funcframework.RegisterHTTPFunctionContext: %v\\n", err)\n    }\n    port := "8080"\n    if envPort := os.Getenv("PORT"); envPort != "" {\n        port = envPort\n    }\n    if err := funcframework.Start(port); err != nil {\n        log.Fatalf("funcframework.Start: %v\\n", err)\n    }\n}\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package db\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "os"\n    "time"\n\n    "github.com/cloudmock/config"\n    "github.com/cloudmock/secret"\n    "go.mongodb.org/mongo-driver/mongo"\n    "go.mongodb.org/mongo-driver/mongo/options"\n)\n\nconst ENV = "ENVIRONMENT"\n\nfunc NewDatabaseConnection() *mongo.Collection {\n    var err error\n    log.Print("Connecting to mongodb")\n    conf, err := config.LoadConfigPath("config/app")\n    if err != nil {\n        log.Fatalf("")\n    }\n    env := os.Getenv(ENV)\n    var client *mongo.Client\n\n    conn, err := secret.GetSecrets()\n    if err != nil {\n        log.Fatalf("mongo db secret url failed %v", err)\n    }\n    if env == "dev" {\n        fmt.Println("Connecting to localdb")\n        client, err = mongo.NewClient(options.Client().SetAuth(\n            options.Credential{\n                Username: conf.DBuser,\n                Password: conf.DBpassword,\n            }).ApplyURI(conf.DBurl))\n    } else {\n        client, err = mongo.NewClient(options.Client().ApplyURI(conn))\n    }\n\n    if err != nil {\n        log.Fatalf("mongo db client failed %v", err)\n    }\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    err = client.Connect(ctx)\n    if err != nil {\n        log.Fatalf("mongo db connection failed %s", err) //nolint:gocritic\n    }\n    return client.Database("function").Collection("payments")\n}\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package router\n\nimport (\n    "encoding/json"\n    "github.com/brianvoe/gofakeit/v6"\n    "net/http"\n)\n\ntype UserDetails struct {\n    Name     string `json:"name"`\n    Email    string `json:"email"`\n    Phone    string `json:"phone"`\n    Address  string `json:"address"`\n    Company  string `json:"company"`\n    JobTitle string `json:"jobTitle"`\n}\n\nfunc NewUserWrite() *[]UserDetails {\n    var usr []UserDetails\n    for i := 0; i < gofakeit.RandomInt([]int{5, 10, 12, 4, 11}); i++ {\n        usr = append(usr, UserDetails{\n            Name:     gofakeit.Name(),\n            Email:    gofakeit.Email(),\n            Phone:    gofakeit.Phone(),\n            Address:  gofakeit.Address().Address,\n            Company:  gofakeit.Company(),\n            JobTitle: gofakeit.JobTitle(),\n        })\n    }\n    return &usr\n}\n\nfunc User() func(w http.ResponseWriter, r *http.Request) {\n    return func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set("Content-Type", "application/json")\n        jData, err := json.Marshal(NewUserWrite())\n        if err != nil {\n            http.Error(w, err.Error(), http.StatusInternalServerError)\n            return\n        }\n        w.WriteHeader(http.StatusOK)\n        w.Write(jData)\n    }\n}\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package p\n\nimport (\n    "github.com/cloudmock/router"\n    "github.com/go-chi/chi/v5"\n    "github.com/go-chi/chi/v5/middleware"\n    "github.com/go-chi/httprate"\n    "github.com/rs/cors"\n    "net/http"\n    "time"\n)\n\nfunc GoMock(w http.ResponseWriter, r *http.Request) {\n    rc := chi.NewRouter()\n    conn := db.NewDatabaseConnection()\n\n    rc.Use(middleware.RealIP)\n    rc.Use(middleware.Logger)\n    rc.Use(httprate.Limit(\n        2,\n        1*time.Second,\n        httprate.WithLimitHandler(func(w http.ResponseWriter, r *http.Request) {\n            http.Error(w, "too many requests", http.StatusTooManyRequests)\n        }),\n    ))\n\n    rc.Route("/api/v1", func(rc chi.Router) {\n        rc.Get("/users", router.User())\n        rc.Get("/categories", router.Category())\n    })\n\n    cors.Default().Handler(rc).ServeHTTP(w, r)\n}\n\n')),(0,r.kt)("h3",{id:"deploy-cloud-function"},"Deploy cloud function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Build and Deploy to CloudFunction\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    name: deploy\n    runs-on: ubuntu-latest\n    steps:\n      - uses: google-github-actions/setup-gcloud@master\n        with:\n          project_id: ${{ secrets.GCP_PROJECT_ID }}\n          service_account_key: ${{ secrets.gcp_credentials }}\n          export_default_credentials: true\n      - uses: actions/checkout@v2\n      - name: Deploy serverless function\n        run: |\n          gcloud functions deploy "GoMock" \\\n            --runtime go113 --trigger-http \\\n            --allow-unauthenticated \\\n            --region australia-southeast1 \\\n            --update-env-vars MONGODB=${{ secrets.mongo_secret }} \\\n            --max-instances 2 \\\n            --memory 128mb \\\n            --service-account=${{ secrets.service_account }} \\\n            --no-user-output-enabled\n')),(0,r.kt)("h2",{id:"why-mocking-using-cloud-function"},"Why Mocking using cloud function"),(0,r.kt)("h2",{id:"use-cases-of-mocking-using-cloud-function"},"Use cases of mocking using cloud function"),(0,r.kt)("h3",{id:"system-testing"},"System Testing"),(0,r.kt)("h3",{id:"performance-testing"},"Performance testing"),(0,r.kt)("p",null,"Performance tests check the behaviors of the system when it is under significant load. These tests are non-functional and can have the various form to understand the reliability, stability, and availability of the platform. For instance, it can be observing response times when executing a high number of requests, or seeing how the system behaves with a significant of data."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img.png",src:t(9593).Z,width:"1823",height:"857"}),"\n",(0,r.kt)("img",{alt:"img.png",src:t(1754).Z,width:"1833",height:"417"})))}g.isMDXComponent=!0},9593:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/K6Result-25acebe39961c7920c7dbca40e2e33e8.png"},1754:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/function-9fb2556cd7f83454557403a8a7a0ffa7.png"}}]);