"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[5089],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,m=u["".concat(l,".").concat(d)]||u[d]||g[d]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={id:"godoc2",title:"Get Little bit deeper",sidebar_label:"Get Little bit deeper"},a=void 0,p={unversionedId:"snippets/programming/go/godoc2",id:"snippets/programming/go/godoc2",title:"Get Little bit deeper",description:"Pattern of code calling",source:"@site/docs/snippets/programming/go/godoc2.md",sourceDirName:"snippets/programming/go",slug:"/snippets/programming/go/godoc2",permalink:"/docs/snippets/programming/go/godoc2",draft:!1,editUrl:"https://github.com/dipjyotimetia/Docs/docs/snippets/programming/go/godoc2.md",tags:[],version:"current",frontMatter:{id:"godoc2",title:"Get Little bit deeper",sidebar_label:"Get Little bit deeper"},sidebar:"Docs",previous:{title:"Get Started",permalink:"/docs/snippets/programming/go/godoc1"},next:{title:"Go Concepts",permalink:"/docs/snippets/programming/go/godoc3"}},l={},c=[{value:"Pattern of code calling",id:"pattern-of-code-calling",level:3},{value:"Simple http test",id:"simple-http-test",level:3}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"pattern-of-code-calling"},"Pattern of code calling"),(0,o.kt)("p",null,"golang order of code execution\nimport --\x3e const --\x3e var --\x3e init()"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package creature\n\nimport (\n    "math/rand"\n    "time"\n)\n\nvar creatures = []string{"shark", "jellyfish", "squid", "octopus", "dolphin"}\n\nfunc init() {\n    rand.Seed(time.Now().UnixNano())\n}\n\nfunc Random() string {\n    i := rand.Intn(len(creatures))\n    return creatures[i]\n}\n')),(0,o.kt)("h3",{id:"simple-http-test"},"Simple http test"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "io/ioutil"\n    "net/http"\n    "os"\n    "strings"\n    "testing"\n\n    rest "github.com/hashicorp/go-retryablehttp"\n)\n\nfunc TestService(t *testing.T) {\n    port := os.Getenv("PORT")\n    if port == "" {\n        port = "8080"\n    }\n\n    url := os.Getenv("SERVICE_URL")\n    if url == "" {\n        url = "http://localhost:" + port\n    }\n\n    resp, err := rest.Get(url + "/")\n    resp.Header.Add("", "")\n    if err != nil {\n        t.Fatalf("retry.Get: %v", err)\n    }\n\n    if got := resp.StatusCode; got != http.StatusOK {\n        t.Errorf("HTTP Response: got %q, want %q", got, http.StatusOK)\n    }\n\n    out, err := ioutil.ReadAll(resp.Body)\n    if err != nil {\n        t.Fatalf("ioutil.ReadAll: %v", err)\n    }\n\n    want := "Congratulations, you successfully deployed a container image to Cloud Run"\n    if !strings.Contains(string(out), want) {\n        t.Errorf("HTTP Response: body does not include %q", want)\n    }\n}\n')))}u.isMDXComponent=!0}}]);