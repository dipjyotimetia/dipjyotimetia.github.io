"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[5619],{3905:function(n,r,e){e.d(r,{Zo:function(){return p},kt:function(){return g}});var t=e(7294);function i(n,r,e){return r in n?Object.defineProperty(n,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[r]=e,n}function a(n,r){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),e.push.apply(e,t)}return e}function o(n){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?a(Object(e),!0).forEach((function(r){i(n,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(e,r))}))}return n}function l(n,r){if(null==n)return{};var e,t,i=function(n,r){if(null==n)return{};var e,t,i={},a=Object.keys(n);for(t=0;t<a.length;t++)e=a[t],r.indexOf(e)>=0||(i[e]=n[e]);return i}(n,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(t=0;t<a.length;t++)e=a[t],r.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=t.createContext({}),c=function(n){var r=t.useContext(s),e=r;return n&&(e="function"==typeof n?n(r):o(o({},r),n)),e},p=function(n){var r=c(n.components);return t.createElement(s.Provider,{value:r},n.children)},u={inlineCode:"code",wrapper:function(n){var r=n.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(n,r){var e=n.components,i=n.mdxType,a=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),f=c(e),g=i,m=f["".concat(s,".").concat(g)]||f[g]||u[g]||a;return e?t.createElement(m,o(o({ref:r},p),{},{components:e})):t.createElement(m,o({ref:r},p))}));function g(n,r){var e=arguments,i=r&&r.mdxType;if("string"==typeof n||i){var a=e.length,o=new Array(a);o[0]=f;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var c=2;c<a;c++)o[c]=e[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,e)}f.displayName="MDXCreateElement"},206:function(n,r,e){e.r(r),e.d(r,{assets:function(){return p},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var t=e(3117),i=e(102),a=(e(7294),e(3905)),o=["components"],l={id:"arrays",title:"DSA Arrays",sidebar_label:"DSA_Arrays"},s=void 0,c={unversionedId:"snippets/programming/java/arrays",id:"snippets/programming/java/arrays",title:"DSA Arrays",description:"",source:"@site/docs/snippets/programming/java/arrays.md",sourceDirName:"snippets/programming/java",slug:"/snippets/programming/java/arrays",permalink:"/docs/snippets/programming/java/arrays",draft:!1,editUrl:"https://github.com/dipjyotimetia/Docs/docs/snippets/programming/java/arrays.md",tags:[],version:"current",frontMatter:{id:"arrays",title:"DSA Arrays",sidebar_label:"DSA_Arrays"},sidebar:"Docs",previous:{title:"Get Started",permalink:"/docs/snippets/programming/java/java1"},next:{title:"React",permalink:"/docs/snippets/programming/react/react1"}},p={},u=[],f={toc:u};function g(n){var r=n.components,e=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,t.Z)({},f,e,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n    /**\n     * Big o of n time, array search if array in un-sorted O(n)\n     * Linear search\n     * In worst case it will traverse the whole array\n     * search in sorted way O(logn)\n     */\n    public int search(int arr[], int element) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Time complexity of insert operation is O(n)\n     * time complexity if insert os O(1)\n     */\n    public int insert(int arr[], int element, int capacity, int position) {\n        if (arr.length == capacity) {\n            return arr.length;\n        }\n        int index = position - 1;\n        for (int i = arr.length - 1; i >= index; i--) {\n            arr[i + 1] = arr[i];\n            arr[index] = element;\n        }\n        return element + 1;\n    }\n\n    public int delete(int arr[], int element) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == element) {\n                break;\n            }\n            if (i == arr.length) {\n                return arr.length;\n            }\n            for (int j = i; j < arr.length - 1; j++) {\n                arr[j] = arr[j + 1];\n            }\n        }\n        return arr.length - 1;\n    }\n\n    /**\n     * Find the largest element of an array\n     * Time complexity of this approach is O(n^2)\n     */\n    public int getLargestElement(int arr[]) {\n        for (int i = 0; i < arr.length; i++) {\n            boolean flag = true;\n            for (int j = 0; j < arr.length; j++) {\n                if (arr[j] > arr[i]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag == true) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Find the largest element of an array\n     * Time complexity of this approach is O(n)\n     */\n    public int getLargestElementEfficient(int arr[]) {\n        int res = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[res]) {\n                res = i;\n            }\n        }\n        return res;\n    }\n\n    public int getSecondLargestElement(int arr[]) {\n        int res = -1;\n        int largest = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[largest]) {\n                res = largest;\n                largest = i;\n            } else if (arr[i] != arr[largest]) {\n                if (res == -1 || arr[i] > arr[res]) {\n                    res = i;\n                }\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Time complexity is O(n^2)\n     */\n    public boolean checkArrayIsSorted(int arr[]) {\n        boolean flag = true;\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[i]) {\n                    return false;\n                }\n            }\n        }\n        return flag;\n    }\n\n    /**\n     * Time complexity is O(n), understand auxilary space?\n     */\n    public boolean checkArrayIsSortedEfficient(int arr[]) {\n        boolean flag = true;\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < arr[i - 1]) {\n                return false;\n            }\n        }\n        return flag;\n    }\n\n    /**\n     * Reverse an array problem\n     */\n\n    public void reverseArray(int arr[]) {\n        int low = 0;\n        int high = arr.length - 1;\n        while (low < high) {\n            int temp = arr[low];\n            arr[low] = arr[high];\n            arr[high] = temp;\n            low++;\n            high--;\n        }\n    }\n\n")))}g.isMDXComponent=!0}}]);