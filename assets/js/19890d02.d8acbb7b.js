"use strict";(self.webpackChunktech_blog=self.webpackChunktech_blog||[]).push([[1477],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(t),f=a,g=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(g,c(c({ref:n},p),{},{components:t})):r.createElement(g,c({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:a,c[1]=o;for(var l=2;l<i;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={id:"sec1",title:"Certificate generation",sidebar_label:"Certificate generation"},c="Certificate Generator Dockerfile",o={unversionedId:"snippets/security/sec1",id:"snippets/security/sec1",title:"Certificate generation",description:"This Dockerfile allows you to generate client-server certificates using CFSSL and export them to a local volume.",source:"@site/docs/snippets/security/certificate.md",sourceDirName:"snippets/security",slug:"/snippets/security/sec1",permalink:"/docs/snippets/security/sec1",draft:!1,editUrl:"https://github.com/dipjyotimetia/Docs/docs/snippets/security/certificate.md",tags:[],version:"current",frontMatter:{id:"sec1",title:"Certificate generation",sidebar_label:"Certificate generation"},sidebar:"Docs",previous:{title:"Jenkins",permalink:"/docs/snippets/cloud/ci/jenkins"},next:{title:"Taurus",permalink:"/docs/snippets/performance/taurus"}},s={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Usage",id:"usage",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"certificate-generator-dockerfile"},"Certificate Generator Dockerfile"),(0,a.kt)("p",null,"This Dockerfile allows you to generate client-server certificates using CFSSL and export them to a local volume."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Docker should be installed on your machine.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Clone the repository and navigate to the project directory.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Place your configuration files (",(0,a.kt)("inlineCode",{parentName:"p"},"ca-csr.json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"ca-config.json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"peer.json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"server.json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"client.json"),") in the project directory.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Build the Docker image:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker build -t certificate-generator .\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Run a container from the image, mapping the ",(0,a.kt)("inlineCode",{parentName:"li"},"/certs_volume")," directory to a local volume on your host machine:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'docker run -v "$(pwd):/certs_volume" certificate-generator\n')),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"After running the container, the generated certificates will be available in the specified local volume.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"At the end verify the generated pem files"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl x509 -in ca.pem -text -noout\nopenssl x509 -in server.pem -text -noout\nopenssl x509 -in client.pem -text -noout\n")),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"Extract public key from a certificate")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl x509 -in certificate.pem -pubkey -noout > public.pem\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM cfssl/cfssl AS cfssl\n\nLABEL author="Dipjyoti Metia"\nLABEL version="1.0"\n\n\nWORKDIR /app\n\nCOPY *.json /app/\n\n# Generate the certificates\nRUN cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\nRUN cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=peer peer.json | cfssljson -bare peer\nRUN cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=server server.json | cfssljson -bare server\nRUN cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client client.json | cfssljson -bare client\n\nFROM debian:11-slim\n\nCOPY --from=cfssl /app/*.pem /app/*.csr /certs/\n\nWORKDIR /certs\n\nCMD ["cp", "-R", "/certs", "/certs_volume"]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "signing": {\n      "default": {\n          "expiry": "43800h"\n      },\n      "profiles": {\n          "server": {\n              "expiry": "43800h",\n              "usages": [\n                  "signing",\n                  "key encipherment",\n                  "server auth"\n              ]\n          },\n          "client": {\n              "expiry": "43800h",\n              "usages": [\n                  "signing",\n                  "key encipherment",\n                  "client auth"\n              ]\n          },\n          "peer": {\n              "expiry": "43800h",\n              "usages": [\n                  "signing",\n                  "key encipherment",\n                  "server auth",\n                  "client auth"\n              ]\n          }\n      }\n  }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ca-csr")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "CN": "docker.event",\n    "key": {\n      "algo": "rsa",\n      "size": 2048\n    },\n    "names": [\n      {\n        "C": "Australia",\n        "L": "Melbourne",\n        "O": "Open Source",\n        "OU": "IT Department",\n        "ST": "VIC"\n      }\n    ]\n  }\n  \n')))}u.isMDXComponent=!0}}]);